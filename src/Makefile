# Make sure ocamlbuild can find opam-managed packages: first run
#
# eval `opam config env`

# Easiest way to build: using ocamlbuild, which in turn uses ocamlfind

all : fire.native arrlib.o printlib.o regexlib.o filelib.o util.o

fire.native :
	ocamlbuild -use-ocamlfind -pkgs llvm,llvm.analysis,batteries -cflags -w,+a-4 \
		fire.native

# "make clean" removes all generated files

.PHONY : clean
clean :
	ocamlbuild -clean
	rm -rf testall.log *.diff fire scanner.ml parser.ml parser.mli fire.native
	rm -rf arrlib printlib filelib regexlib
	rm -rf *.cmx *.cmi *.cmo *.cmx *.o *.s *.ll *.out *.exe

# More detailed: build using ocamlc/ocamlopt + ocamlfind to locate LLVM

OBJS = ast.cmx codegen.cmx parser.cmx scanner.cmx semant.cmx fire.cmx

fire : $(OBJS)
	ocamlfind ocamlopt -linkpkg -package llvm -package llvm.analysis $(OBJS) -o fire

scanner.ml : scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli : parser.mly
	ocamlyacc parser.mly

%.cmo : %.ml
	ocamlc -c $<

%.cmi : %.mli
	ocamlc -c $<

%.cmx : %.ml
	ocamlfind ocamlopt -c -package llvm $<

arrlib.o: arrlib.c
	cc -w -c arrlib.c

filelib: filelib.c util.h
	cc -o filelib -DBUILD_TEST filelib.c

regexlib: regexlib.c util.h
	cc -o regexlib -DBUILD_TEST regexlib.c

printlib: printlib.c
	cc -o printlib -DBUILD_TEST printlib.c

arrlib: arrlib.c
	cc -o arrlib -DBUILD_TEST arrlib.c

util: util.c util.h

### Generated by "ocamldep *.ml *.mli" after building scanner.ml and parser.ml
ast.cmo :
ast.cmx :
codegen.cmo : ast.cmo
codegen.cmx : ast.cmx
fire.cmo : semant.cmo scanner.cmo parser.cmi codegen.cmo ast.cmo
fire.cmx : semant.cmx scanner.cmx parser.cmx codegen.cmx ast.cmx
parser.cmo : ast.cmo parser.cmi
parser.cmx : ast.cmx parser.cmi
scanner.cmo : parser.cmi
scanner.cmx : parser.cmx
semant.cmo : ast.cmo
semant.cmx : ast.cmx
parser.cmi : ast.cmo

