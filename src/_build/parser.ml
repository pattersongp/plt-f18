type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSN
  | EQ
  | NEQ
  | LT
  | LTEQ
  | GT
  | GTEQ
  | REQ
  | OR
  | AND
  | NOT
  | TRUE
  | FALSE
  | IF
  | ELSE
  | WHILE
  | RETURN
  | BREAK
  | FOR
  | IN
  | LBRACKET
  | RBRACKET
  | CONCAT
  | COLON
  | REGX
  | INT
  | FUNCTION
  | STRING
  | VOID
  | ARRAY
  | BOOL
  | FILE
  | FATARROW
  | FILTER
  | MAP
  | PRINT
  | OPEN
  | READ
  | WRITE
  | WRITEREAD
  | INT_LIT of (int)
  | ID of (string)
  | STRING_LIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 62 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIVIDE *);
  267 (* ASSN *);
  268 (* EQ *);
  269 (* NEQ *);
  270 (* LT *);
  271 (* LTEQ *);
  272 (* GT *);
  273 (* GTEQ *);
  274 (* REQ *);
  275 (* OR *);
  276 (* AND *);
  277 (* NOT *);
  278 (* TRUE *);
  279 (* FALSE *);
  280 (* IF *);
  281 (* ELSE *);
  282 (* WHILE *);
  283 (* RETURN *);
  284 (* BREAK *);
  285 (* FOR *);
  286 (* IN *);
  287 (* LBRACKET *);
  288 (* RBRACKET *);
  289 (* CONCAT *);
  290 (* COLON *);
  291 (* REGX *);
  292 (* INT *);
  293 (* FUNCTION *);
  294 (* STRING *);
  295 (* VOID *);
  296 (* ARRAY *);
  297 (* BOOL *);
  298 (* FILE *);
  299 (* FATARROW *);
  300 (* FILTER *);
  301 (* MAP *);
  302 (* PRINT *);
  303 (* OPEN *);
  304 (* READ *);
  305 (* WRITE *);
  306 (* WRITEREAD *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  307 (* INT_LIT *);
  308 (* ID *);
  309 (* STRING_LIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\007\000\007\000\003\000\012\000\012\000\008\000\
\008\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\014\000\014\000\014\000\014\000\011\000\011\000\011\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\015\000\015\000\016\000\016\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\012\000\000\000\001\000\002\000\
\004\000\001\000\006\000\001\000\001\000\001\000\001\000\001\000\
\001\000\004\000\000\000\002\000\004\000\000\000\002\000\000\000\
\002\000\002\000\002\000\002\000\006\000\003\000\003\000\005\000\
\007\000\008\000\007\000\007\000\005\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\003\000\004\000\003\000\004\000\
\006\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\070\000\000\000\017\000\012\000\000\000\013\000\
\015\000\000\000\014\000\000\000\001\000\003\000\004\000\000\000\
\010\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\
\038\000\039\000\040\000\000\000\000\000\000\000\000\000\000\000\
\018\000\000\000\000\000\000\000\043\000\044\000\041\000\000\000\
\042\000\000\000\021\000\000\000\000\000\000\000\059\000\060\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\063\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\
\000\000\000\000\062\000\000\000\000\000\000\000\000\000\000\000\
\000\000\019\000\009\000\000\000\000\000\020\000\000\000\024\000\
\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\025\000\000\000\000\000\000\000\027\000\000\000\
\028\000\000\000\000\000\000\000\000\000\026\000\031\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\033\000\
\000\000\036\000\035\000\034\000"

let yydgoto = "\002\000\
\003\000\004\000\014\000\015\000\016\000\066\000\101\000\103\000\
\067\000\017\000\028\000\030\000\114\000\115\000\071\000\072\000"

let yysindex = "\010\000\
\000\000\000\000\000\000\001\000\000\000\000\000\241\255\000\000\
\000\000\237\254\000\000\242\254\000\000\000\000\000\000\222\254\
\000\000\000\000\240\254\207\000\230\254\046\255\047\255\034\255\
\000\000\000\000\000\000\037\255\011\255\074\255\068\255\241\255\
\000\000\011\255\011\255\011\255\000\000\000\000\000\000\004\255\
\000\000\109\001\000\000\241\255\040\255\059\001\000\000\000\000\
\011\255\011\255\011\255\011\255\011\255\011\255\011\255\011\255\
\011\255\011\255\011\255\011\255\011\255\011\255\011\255\011\255\
\024\255\079\255\088\255\000\000\000\000\109\001\096\255\095\255\
\109\001\000\001\029\255\029\255\000\000\000\000\071\255\071\255\
\058\255\058\255\058\255\058\255\071\255\123\001\137\001\000\000\
\059\255\241\255\000\000\011\255\092\255\100\255\054\255\109\001\
\011\255\000\000\000\000\109\001\241\255\000\000\069\255\000\000\
\000\000\110\255\115\255\008\255\117\255\121\255\126\255\131\255\
\132\255\021\001\000\000\103\255\011\255\011\255\000\000\041\001\
\000\000\241\255\067\255\083\255\084\255\000\000\000\000\077\001\
\095\001\000\000\087\255\130\255\137\255\139\255\202\255\202\255\
\108\255\094\255\097\255\098\255\127\255\000\000\101\255\158\255\
\163\255\164\255\202\255\165\255\168\255\171\255\000\000\000\000\
\202\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\118\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\174\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
\000\000\175\255\000\000\176\255\000\000\000\000\000\000\000\000\
\179\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\181\255\000\000\000\000\001\255\000\000\182\255\
\206\255\000\000\064\000\085\000\000\000\000\000\190\000\194\000\
\106\000\127\000\148\000\169\000\215\000\173\000\235\000\000\000\
\000\000\000\000\000\000\000\000\043\000\000\000\000\000\002\255\
\000\000\000\000\000\000\234\255\136\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\169\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\077\000\000\000\249\255\000\000\000\000\082\000\
\000\000\174\000\000\000\000\000\248\255\123\255\000\000\000\000"

let yytablesize = 667
let yytable = "\019\000\
\013\000\141\000\142\000\068\000\069\000\049\000\068\000\069\000\
\119\000\034\000\001\000\020\000\034\000\152\000\050\000\035\000\
\021\000\022\000\035\000\156\000\042\000\025\000\026\000\027\000\
\045\000\046\000\047\000\048\000\036\000\037\000\038\000\036\000\
\037\000\038\000\051\000\023\000\065\000\054\000\055\000\032\000\
\070\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\029\000\031\000\039\000\040\000\041\000\039\000\040\000\041\000\
\052\000\053\000\054\000\055\000\033\000\044\000\034\000\068\000\
\104\000\105\000\043\000\088\000\035\000\052\000\053\000\054\000\
\055\000\089\000\095\000\096\000\058\000\059\000\060\000\061\000\
\100\000\036\000\037\000\038\000\106\000\090\000\107\000\108\000\
\109\000\110\000\091\000\120\000\092\000\094\000\097\000\098\000\
\034\000\099\000\104\000\127\000\128\000\129\000\035\000\117\000\
\111\000\112\000\131\000\113\000\118\000\121\000\132\000\039\000\
\040\000\041\000\122\000\036\000\037\000\038\000\106\000\123\000\
\107\000\108\000\109\000\110\000\124\000\125\000\133\000\138\000\
\134\000\024\000\137\000\024\000\024\000\143\000\139\000\024\000\
\140\000\144\000\111\000\112\000\145\000\113\000\146\000\147\000\
\148\000\039\000\040\000\041\000\024\000\024\000\024\000\024\000\
\149\000\024\000\024\000\024\000\024\000\150\000\151\000\153\000\
\154\000\016\000\032\000\155\000\032\000\032\000\022\000\023\000\
\032\000\102\000\006\000\024\000\024\000\066\000\024\000\007\000\
\067\000\116\000\024\000\024\000\024\000\032\000\032\000\032\000\
\032\000\024\000\032\000\032\000\032\000\032\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\104\000\061\000\000\000\
\061\000\035\000\000\000\061\000\032\000\032\000\000\000\032\000\
\000\000\000\000\000\000\032\000\032\000\032\000\036\000\037\000\
\038\000\106\000\000\000\107\000\108\000\109\000\110\000\000\000\
\000\000\000\000\065\000\000\000\065\000\061\000\000\000\065\000\
\000\000\000\000\000\000\000\000\000\000\111\000\112\000\000\000\
\113\000\000\000\000\000\000\000\039\000\040\000\041\000\045\000\
\000\000\045\000\000\000\000\000\045\000\045\000\045\000\045\000\
\045\000\065\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\005\000\006\000\018\000\008\000\009\000\
\010\000\011\000\012\000\000\000\000\000\000\000\045\000\000\000\
\000\000\000\000\000\000\005\000\006\000\007\000\008\000\009\000\
\010\000\011\000\012\000\064\000\000\000\064\000\000\000\000\000\
\064\000\064\000\064\000\064\000\064\000\000\000\064\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\000\000\
\046\000\000\000\046\000\000\000\000\000\046\000\046\000\046\000\
\000\000\000\000\064\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\000\000\047\000\000\000\047\000\
\000\000\000\000\047\000\047\000\047\000\000\000\000\000\046\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\000\000\052\000\000\000\052\000\000\000\000\000\052\000\
\000\000\000\000\000\000\000\000\047\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\000\000\053\000\
\000\000\053\000\000\000\000\000\053\000\000\000\000\000\000\000\
\000\000\052\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\000\000\054\000\000\000\054\000\000\000\
\000\000\054\000\000\000\000\000\000\000\000\000\053\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\000\000\055\000\000\000\055\000\000\000\058\000\055\000\058\000\
\000\000\000\000\058\000\054\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\000\000\050\000\058\000\
\050\000\000\000\051\000\050\000\051\000\000\000\000\000\051\000\
\055\000\050\000\050\000\000\000\058\000\051\000\051\000\050\000\
\050\000\050\000\000\000\051\000\051\000\051\000\000\000\056\000\
\000\000\056\000\000\000\000\000\056\000\050\000\000\000\000\000\
\000\000\051\000\056\000\056\000\000\000\000\000\000\000\000\000\
\056\000\056\000\056\000\057\000\000\000\057\000\000\000\000\000\
\057\000\005\000\006\000\018\000\008\000\009\000\056\000\011\000\
\012\000\000\000\000\000\000\000\000\000\057\000\057\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\053\000\
\054\000\055\000\057\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\064\000\000\000\126\000\000\000\000\000\
\000\000\000\000\000\000\052\000\053\000\054\000\055\000\093\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\130\000\000\000\000\000\000\000\000\000\000\000\052\000\
\053\000\054\000\055\000\000\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\069\000\000\000\000\000\
\000\000\052\000\053\000\054\000\055\000\000\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\135\000\
\000\000\000\000\000\000\052\000\053\000\054\000\055\000\000\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\136\000\000\000\000\000\000\000\052\000\053\000\054\000\
\055\000\000\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\052\000\053\000\054\000\055\000\000\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\052\000\053\000\054\000\055\000\000\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\000\000\064\000\052\000\
\053\000\054\000\055\000\000\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000"

let yycheck = "\007\000\
\000\000\135\000\136\000\003\001\003\001\002\001\006\001\006\001\
\001\001\002\001\001\000\031\001\002\001\147\000\011\001\008\001\
\031\001\052\001\008\001\153\000\029\000\048\001\049\001\050\001\
\032\000\034\000\035\000\036\000\021\001\022\001\023\001\021\001\
\022\001\023\001\031\001\052\001\044\000\009\001\010\001\006\001\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\011\001\011\001\051\001\052\001\053\001\051\001\052\001\053\001\
\007\001\008\001\009\001\010\001\032\001\002\001\002\001\032\001\
\004\001\005\001\001\001\052\001\008\001\007\001\008\001\009\001\
\010\001\003\001\090\000\092\000\014\001\015\001\016\001\017\001\
\097\000\021\001\022\001\023\001\024\001\006\001\026\001\027\001\
\028\001\029\001\003\001\108\000\006\001\043\001\011\001\004\001\
\002\001\052\001\004\001\005\001\117\000\118\000\008\001\002\001\
\044\001\045\001\122\000\047\001\002\001\001\001\052\001\051\001\
\052\001\053\001\002\001\021\001\022\001\023\001\024\001\002\001\
\026\001\027\001\028\001\029\001\002\001\002\001\052\001\006\001\
\053\001\002\001\052\001\004\001\005\001\034\001\006\001\008\001\
\006\001\052\001\044\001\045\001\052\001\047\001\053\001\025\001\
\052\001\051\001\052\001\053\001\021\001\022\001\023\001\024\001\
\003\001\026\001\027\001\028\001\029\001\003\001\003\001\003\001\
\001\001\052\001\002\001\001\001\004\001\005\001\001\001\001\001\
\008\001\101\000\003\001\044\001\045\001\003\001\047\001\003\001\
\003\001\104\000\051\001\052\001\053\001\021\001\022\001\023\001\
\024\001\020\000\026\001\027\001\028\001\029\001\255\255\255\255\
\255\255\255\255\255\255\002\001\255\255\004\001\001\001\255\255\
\003\001\008\001\255\255\006\001\044\001\045\001\255\255\047\001\
\255\255\255\255\255\255\051\001\052\001\053\001\021\001\022\001\
\023\001\024\001\255\255\026\001\027\001\028\001\029\001\255\255\
\255\255\255\255\001\001\255\255\003\001\032\001\255\255\006\001\
\255\255\255\255\255\255\255\255\255\255\044\001\045\001\255\255\
\047\001\255\255\255\255\255\255\051\001\052\001\053\001\001\001\
\255\255\003\001\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\032\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\255\255\255\255\255\255\032\001\255\255\
\255\255\255\255\255\255\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\001\001\255\255\003\001\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\001\001\255\255\003\001\255\255\255\255\006\001\007\001\008\001\
\255\255\255\255\032\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\001\001\255\255\003\001\
\255\255\255\255\006\001\007\001\008\001\255\255\255\255\032\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\255\255\255\255\255\255\032\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\032\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\255\255\255\255\032\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\001\001\255\255\003\001\255\255\001\001\006\001\003\001\
\255\255\255\255\006\001\032\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\001\001\019\001\
\003\001\255\255\001\001\006\001\003\001\255\255\255\255\006\001\
\032\001\012\001\013\001\255\255\032\001\012\001\013\001\018\001\
\019\001\020\001\255\255\018\001\019\001\020\001\255\255\001\001\
\255\255\003\001\255\255\255\255\006\001\032\001\255\255\255\255\
\255\255\032\001\012\001\013\001\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001\001\001\255\255\003\001\255\255\255\255\
\006\001\035\001\036\001\037\001\038\001\039\001\032\001\041\001\
\042\001\255\255\255\255\255\255\255\255\019\001\020\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\007\001\008\001\
\009\001\010\001\032\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\001\001\255\255\255\255\
\255\255\255\255\255\255\007\001\008\001\009\001\010\001\032\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\001\001\255\255\255\255\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\003\001\255\255\255\255\
\255\255\007\001\008\001\009\001\010\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\003\001\
\255\255\255\255\255\255\007\001\008\001\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\003\001\255\255\255\255\255\255\007\001\008\001\009\001\
\010\001\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\007\001\008\001\009\001\010\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\007\001\008\001\009\001\010\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\020\001\007\001\
\008\001\009\001\010\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LTEQ\000\
  GT\000\
  GTEQ\000\
  REQ\000\
  OR\000\
  AND\000\
  NOT\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  RETURN\000\
  BREAK\000\
  FOR\000\
  IN\000\
  LBRACKET\000\
  RBRACKET\000\
  CONCAT\000\
  COLON\000\
  REGX\000\
  INT\000\
  FUNCTION\000\
  STRING\000\
  VOID\000\
  ARRAY\000\
  BOOL\000\
  FILE\000\
  FATARROW\000\
  FILTER\000\
  MAP\000\
  PRINT\000\
  OPEN\000\
  READ\000\
  WRITE\000\
  WRITEREAD\000\
  EOF\000\
  "

let yynames_block = "\
  INT_LIT\000\
  ID\000\
  STRING_LIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 40 "parser.mly"
            ( _1 )
# 459 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
                 ( [], [] )
# 465 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 44 "parser.mly"
               ( (_2 :: fst _1), snd _1 )
# 473 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 45 "parser.mly"
               ( fst _1, (_2 :: snd _1) )
# 481 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 6 : 'formals_opt) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 49 "parser.mly"
     ( { typ = _2;
	 fname = _3;
	 formals = _6;
	 locals = List.rev _10;
	 body = List.rev _11 } )
# 496 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                  ( [] )
# 502 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 57 "parser.mly"
                  ( List.rev _1 )
# 509 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 60 "parser.mly"
                             ( [(_1,_2, None)] )
# 517 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 61 "parser.mly"
                             ( (_3,_4, None) :: _1 )
# 526 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'concrete_typ) in
    Obj.repr(
# 64 "parser.mly"
                       ( _1 )
# 533 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'concrete_typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 65 "parser.mly"
                                                         ( ArrayDecl(_3, _5) )
# 541 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
                    ( Int    )
# 547 "parser.ml"
               : 'concrete_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
                    ( String )
# 553 "parser.ml"
               : 'concrete_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
                    ( Bool )
# 559 "parser.ml"
               : 'concrete_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
                    ( Void   )
# 565 "parser.ml"
               : 'concrete_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
                    ( Function   )
# 571 "parser.ml"
               : 'concrete_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                    ( Regx )
# 577 "parser.ml"
               : 'concrete_typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'mode) in
    Obj.repr(
# 74 "parser.mly"
                                      ( File(_3) )
# 584 "parser.ml"
               : 'concrete_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
                     ( [] )
# 590 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 78 "parser.mly"
                     ( _2 :: _1 )
# 598 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'assign_opt) in
    Obj.repr(
# 81 "parser.mly"
                                ( (_1, _2, _3) )
# 607 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
                    ( None )
# 613 "parser.ml"
               : 'assign_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                    ( Some _2 )
# 620 "parser.ml"
               : 'assign_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                   ( [] )
# 626 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 89 "parser.mly"
                   ( _2 :: _1 )
# 634 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
              ( Expr _1 )
# 641 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
                ( Return None )
# 647 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
               ( Break )
# 653 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 95 "parser.mly"
                                                   ( Open(_3, _5) )
# 661 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                     ( Return (Some _2) )
# 668 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 97 "parser.mly"
                            ( Block(List.rev _2) )
# 675 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 98 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 683 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 99 "parser.mly"
                                            ( If(_3, _5, _7) )
# 692 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 101 "parser.mly"
        ( For(_3, _4, _6, _8) )
# 702 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 102 "parser.mly"
                                       ( Map(_3, _5)  )
# 710 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 103 "parser.mly"
                                          ( Filter(_3, _5)  )
# 718 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 104 "parser.mly"
                                  ( While(_3, _5) )
# 726 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parser.mly"
               ( Read )
# 732 "parser.ml"
               : 'mode))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
                ( Write )
# 738 "parser.ml"
               : 'mode))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
                    ( WriteRead )
# 744 "parser.ml"
               : 'mode))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 112 "parser.mly"
                     ( Literal(_1) )
# 751 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
                     ( StringLit(_1) )
# 758 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
                     ( BoolLit(true) )
# 764 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser.mly"
                     ( BoolLit(false) )
# 770 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 116 "parser.mly"
                     ( Id(_1) )
# 777 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, Plus,   _3) )
# 785 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, Minus,   _3) )
# 793 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Binop(_1, Times,  _3) )
# 801 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                     ( Binop(_1, Divide,   _3) )
# 809 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Binop(_1, Eq, _3) )
# 817 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 825 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                     ( Binop(_1, Lt,  _3) )
# 833 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                     ( Binop(_1, Lteq,   _3) )
# 841 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                     ( Binop(_1, Gt, _3) )
# 849 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                     ( Binop(_1, Gteq,   _3) )
# 857 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                     ( Binop(_1, Req,   _3) )
# 865 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 873 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 881 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                         ( Unop(Neg, _2) )
# 888 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                     ( Unop(Not, _2) )
# 895 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                   ( Assign(_1, _3) )
# 903 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 133 "parser.mly"
                                 ( Call(_1, _3) )
# 911 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                       ( _2 )
# 918 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                              ( Retrieve(_1, _3))
# 926 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                                        (Array_Assign(_1, _3, _6))
# 935 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "parser.mly"
                  ( [] )
# 941 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 140 "parser.mly"
                  ( List.rev _1 )
# 948 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                            ( [Some _1] )
# 955 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                            ( Some _3 :: _1 )
# 963 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
